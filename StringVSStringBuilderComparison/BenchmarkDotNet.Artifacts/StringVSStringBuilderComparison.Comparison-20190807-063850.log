// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 2 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
// start dotnet restore  /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in C:\Users\ysant\source\repos\StringVSStringBuilderComparison\StringVSStringBuilderComparison\bin\Release\netcoreapp2.2\36051cb8-6edf-41dd-9a57-ee8c3625d4a4
// command took 3.6s and exited with 0
// start dotnet build -c Release  --no-restore /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in C:\Users\ysant\source\repos\StringVSStringBuilderComparison\StringVSStringBuilderComparison\bin\Release\netcoreapp2.2\36051cb8-6edf-41dd-9a57-ee8c3625d4a4
// command took 14.71s and exited with 1
// start dotnet build -c Release  --no-restore --no-dependencies /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in C:\Users\ysant\source\repos\StringVSStringBuilderComparison\StringVSStringBuilderComparison\bin\Release\netcoreapp2.2\36051cb8-6edf-41dd-9a57-ee8c3625d4a4
// command took 5s and exited with 0
// ***** Done, took 00:00:23 (23.68 sec)   *****
// Found 2 benchmarks:
//   Comparison.StringPerformance: DefaultJob [input=String]
//   Comparison.StringBuilderPerformance: DefaultJob [input=StringBuilder]

Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)// **************************
// Benchmark: Comparison.StringPerformance: DefaultJob [input=String]
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "36051cb8-6edf-41dd-9a57-ee8c3625d4a4.dll" --benchmarkName "StringVSStringBuilderComparison.Comparison.StringPerformance(input: "String")" --job "Default" --benchmarkId 0 in C:\Users\ysant\source\repos\StringVSStringBuilderComparison\StringVSStringBuilderComparison\bin\Release\netcoreapp2.2\36051cb8-6edf-41dd-9a57-ee8c3625d4a4\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.6 (CoreCLR 4.6.27817.03, CoreFX 4.6.27818.02), 64bit RyuJIT
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 581287.22 ns, 581.2872 us/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.String.Concat(String str0, String str1)
   at StringVSStringBuilderComparison.Comparison.StringPerformance(String input) in C:\Users\ysant\source\repos\StringVSStringBuilderComparison\StringVSStringBuilderComparison\Comparison.cs:line 16
   at BenchmarkDotNet.Autogenerated.Runnable_0.WorkloadActionNoUnroll(Int64 invokeCount) in C:\Users\ysant\source\repos\StringVSStringBuilderComparison\StringVSStringBuilderComparison\bin\Release\netcoreapp2.2\36051cb8-6edf-41dd-9a57-ee8c3625d4a4\36051cb8-6edf-41dd-9a57-ee8c3625d4a4.notcs:line 487
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineFactory.Jit(Engine engine, Int32 jitIndex, Int32 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_0.Run(IHost host, String benchmarkName) in C:\Users\ysant\source\repos\StringVSStringBuilderComparison\StringVSStringBuilderComparison\bin\Release\netcoreapp2.2\36051cb8-6edf-41dd-9a57-ee8c3625d4a4\36051cb8-6edf-41dd-9a57-ee8c3625d4a4.notcs:line 164
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in C:\Users\ysant\source\repos\StringVSStringBuilderComparison\StringVSStringBuilderComparison\bin\Release\netcoreapp2.2\36051cb8-6edf-41dd-9a57-ee8c3625d4a4\36051cb8-6edf-41dd-9a57-ee8c3625d4a4.notcs:line 49
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: Comparison.StringBuilderPerformance: DefaultJob [input=StringBuilder]
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "36051cb8-6edf-41dd-9a57-ee8c3625d4a4.dll" --benchmarkName "StringVSStringBuilderComparison.Comparison.StringBuilderPerformance(input: "StringBuilder")" --job "Default" --benchmarkId 1 in C:\Users\ysant\source\repos\StringVSStringBuilderComparison\StringVSStringBuilderComparison\bin\Release\netcoreapp2.2\36051cb8-6edf-41dd-9a57-ee8c3625d4a4\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.6 (CoreCLR 4.6.27817.03, CoreFX 4.6.27818.02), 64bit RyuJIT
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 788056.26 ns, 788.0563 us/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
   at System.Text.StringBuilder.AppendCore(StringBuilder value, Int32 startIndex, Int32 count)
   at StringVSStringBuilderComparison.Comparison.StringBuilderPerformance(String input) in C:\Users\ysant\source\repos\StringVSStringBuilderComparison\StringVSStringBuilderComparison\Comparison.cs:line 29
   at BenchmarkDotNet.Autogenerated.Runnable_1.WorkloadActionNoUnroll(Int64 invokeCount) in C:\Users\ysant\source\repos\StringVSStringBuilderComparison\StringVSStringBuilderComparison\bin\Release\netcoreapp2.2\36051cb8-6edf-41dd-9a57-ee8c3625d4a4\36051cb8-6edf-41dd-9a57-ee8c3625d4a4.notcs:line 1131
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineFactory.Jit(Engine engine, Int32 jitIndex, Int32 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_1.Run(IHost host, String benchmarkName) in C:\Users\ysant\source\repos\StringVSStringBuilderComparison\StringVSStringBuilderComparison\bin\Release\netcoreapp2.2\36051cb8-6edf-41dd-9a57-ee8c3625d4a4\36051cb8-6edf-41dd-9a57-ee8c3625d4a4.notcs:line 808
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in C:\Users\ysant\source\repos\StringVSStringBuilderComparison\StringVSStringBuilderComparison\bin\Release\netcoreapp2.2\36051cb8-6edf-41dd-9a57-ee8c3625d4a4\36051cb8-6edf-41dd-9a57-ee8c3625d4a4.notcs:line 49
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


Successfully reverted power plan (GUID: 381b4222-f694-41f0-9685-ff5bb260df2e FriendlyName: Balanced)
// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\StringVSStringBuilderComparison.Comparison-report.csv
  BenchmarkDotNet.Artifacts\results\StringVSStringBuilderComparison.Comparison-report-github.md
  BenchmarkDotNet.Artifacts\results\StringVSStringBuilderComparison.Comparison-report.html

// * Detailed results *
Comparison.StringPerformance: DefaultJob [input=String]
Runtime = ; GC = 
There are not any results runs

Comparison.StringBuilderPerformance: DefaultJob [input=StringBuilder]
Runtime = ; GC = 
There are not any results runs

// * Summary *

BenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.1 (1803/April2018Update/Redstone4)
Intel Core i7-6600U CPU 2.60GHz (Skylake), 1 CPU, 4 logical and 2 physical cores
Frequency=2742190 Hz, Resolution=364.6720 ns, Timer=TSC
.NET Core SDK=2.2.108
  [Host] : .NET Core 2.2.6 (CoreCLR 4.6.27817.03, CoreFX 4.6.27818.02), 64bit RyuJIT  [AttachedDebugger]


|                   Method |         input | Mean | Error |
|------------------------- |-------------- |-----:|------:|
|        StringPerformance |        String |   NA |    NA |
| StringBuilderPerformance | StringBuilder |   NA |    NA |

Benchmarks with issues:
  Comparison.StringPerformance: DefaultJob [input=String]
  Comparison.StringBuilderPerformance: DefaultJob [input=StringBuilder]

// * Warnings *
Environment
  Summary -> Benchmark was executed with attached debugger
  Summary -> Detected error exit code from one of the benchmarks. It might be caused by following antivirus software:
        - McAfee Endpoint Security (C:\Program Files (x86)\McAfee\Endpoint Security\Threat Prevention\AMCFG.EXE)
        - Windows Defender (windowsdefender://)
Use InProcessToolchain to avoid new process creation.


// * Legends *
  input : Value of the 'input' parameter
  Mean  : Arithmetic mean of all measurements
  Error : Half of 99.9% confidence interval
  1 ns  : 1 Nanosecond (0.000000001 sec)

// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:00:11 (11.28 sec), executed benchmarks: 2

Global total time: 00:00:34 (34.97 sec), executed benchmarks: 2
// * Artifacts cleanup *
